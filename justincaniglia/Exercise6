#Problem1. Given two 1-d arrays of simulated values and observed values, Write a Pyhton function to calculate the mean error, coefficient of determination and nash coefficient. Not allowed to use loops
import numpy as np

def mean_error(obs, sim):
    obs = np.array(obs)
    sim = np.array(sim)
    return np.nanmean(sim - obs)

def coeff_determination(obs, sim):
    obs = np.array(obs)
    sim = np.array(sim)
    n = obs.size
    return (n * np.nansum(obs * sim) - np.nansum(obs) * np.nansum(sim)) ** 2 / \
            ((n * np.nansum(obs ** 2) - np.nansum(obs) ** 2) * (n * np.nansum(sim ** 2) - np.nansum(sim) ** 2))

def coeff_nash(obs, sim):
    obs = np.array(obs)
    sim = np.array(sim)
    obs_mean = np.nanmean(obs)
    return 1 - np.nansum((sim - obs) ** 2) / np.nansum((sim - obs_mean) ** 2)
    
    
    
  obs = [11, 48, 48, 49, 37, 89]
sim = [-11, 67, 78, 84, 114, 52]


print(obs)
print(sim)

print('coefficient of determination:', coeff_determination(obs, sim))
print('Nash\'s efficiency:', coeff_nash(obs, sim))




#Problem2.Given x and y, write a Python function to perform linear regression which returns a, c and sum of square errors where ax + c = y
def linear_regression(x, y):
    # get rid of nans
    not_nan = ~ (np.isnan(x) | np.isnan(y))
    x = np.array(x)[not_nan]
    y = np.array(y)[not_nan]
    if x.size != y.size:
        print('the sizes are different between x and y')
        return
    sumx = x.sum()
    sumxx = (x ** 2).sum()
    sumy = y.sum()
    sumxy = (x * y).sum()
    n = x.size
    a = (sumxy - sumx * sumy / n) / (sumxx - sumx ** 2 / n)
    c = y.mean() - a * x.mean()
    ssqe = np.nansum((a * x + c - y) ** 2)
    return a, c, ssqe

x = obs
y = sim
linear_regression(x, y)




#Problem3. Eestimate the mean precipitation on different land use types.
# create the datasets
landuse = np.random.randint(1, 6, [5, 5])
precip  = np.random.random([5, 5])

print('landuse\n', landuse)
print('precip \n', precip)

# calculation
def landuse_precip(landuse, precip, prefix='landuse'):
    return [(f'{prefix}{i}', (precip[landuse == i]).mean()) for i in np.unique(landuse)]

landuse_precip(landuse, precip)





import matplotlib.pyplot as plt

plt.scatter(range())




# create the datasets
landuse = np.random.randint(1, 5, [5, 5])
precip  = np.random.random([5, 5])

print('landuse\n', landuse)
print('precip \n', precip)

# calculation
def landuse_precip(landuse, precip, prefix='landuse'):
    return [(f'{prefix}{i}', (precip[landuse == i]).mean()) for i in np.unique(landuse)]

landuse_precip(landuse, precip)




#Problem4.We have two array. The first array is the distribution of irrigated land. The second array is the precipitation

import numpy as np
import matplotlib.pyplot as plt
landuse = [
    [0, 0, 0, 0, 0, 0],
    [0, 0, 1, 0, 0, 0],
    [0, 1, 1, 0, 0, 0],
    [0, 0, 1, 1, 1, 0],
    [0, 1, 1, 0, 0, 0],
    [0, 1, 0, 0, 0, 0],
]
precip  = np.random.random([6, 6])
plt.imshow(landuse)




# first define an array with the distance to the center
distance_x = np.arange(13).reshape([1, 13])
distance_y = np.arange(13).reshape([13, 1])
distance = np.sqrt((distance_x - 6) ** 2 + (distance_y - 6) ** 2) #.astype(np.int)
plt.imshow(distance, cmap='jet'); plt.colorbar()




def create_buffer(landuse, distance=distance):
    
    buf = np.full_like(landuse, 1e9)
    n, m = buf.shape
    index = np.nonzero(landuse)
    for i, j in np.array(index).T:
        distance_buf = distance[(6-i):(6-i+n), (6-j):(6-j+m)]
        buf = np.where(distance_buf < buf, distance_buf, buf)
    return buf

buf = create_buffer(landuse)
plt.imshow(buf, cmap='jet'); plt.colorbar()




landuse_precip(buf, precip, prefix='')




#Problem5.Write a Python function to find the nearest point of a list of given points. You are not allowed to use any type of loops
points = [(3, 8), (10, 6), (3, 9), (1, 6), (8, 9), (1, 2), (3, 9)]
points = np.array(points)

distances = ((points.reshape(7, 1, 2) - points.reshape(1, 7, 2)) ** 2).sum(axis=2)
distances[np.arange(7), np.arange(7)] = 1e9
np.argmin(distances, axis=0)




